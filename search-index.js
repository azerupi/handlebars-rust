var searchIndex = {};
searchIndex["handlebars"] = {"doc":"# Handlebars\nHandlebars is a modern and extensible templating solution originally created in the JavaScript world. It&#39;s used by many popular frameworks like [Ember.js](http://emberjs.com) and Chaplin. It&#39;s also ported to some other platforms such as [Java](https://github.com/jknack/handlebars.java).","items":[[3,"Template","handlebars","",null,null],[12,"name","","",0,null],[12,"elements","","",0,null],[3,"Registry","","The single entry point of your Handlebars templates",null,null],[3,"RenderError","","",null,null],[12,"desc","","",1,null],[3,"RenderContext","","The context of a render call",null,null],[12,"writer","","the `Write` where page is generated",2,null],[12,"current_template","","current template name",2,null],[12,"root_template","","root template name",2,null],[3,"Helper","","",null,null],[3,"Context","","The context wrap data you render on your templates.",null,null],[4,"TemplateError","","Template parsing error",null,null],[13,"UnclosedBraces","","",3,null],[13,"UnexpectedClosingBraces","","",3,null],[13,"MismatchingClosedHelper","","",3,null],[13,"UnclosedHelper","","",3,null],[13,"UnclosedExpression","","",3,null],[4,"TemplateFileError","","",null,null],[13,"TemplateError","","",4,null],[13,"IOError","","",4,null],[4,"TemplateRenderError","","",null,null],[13,"TemplateError","","",5,null],[13,"RenderError","","",5,null],[13,"IOError","","",5,null],[11,"fmt","","",0,{"inputs":[{"name":"template"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"template"}],"output":{"name":"template"}}],[11,"eq","","",0,{"inputs":[{"name":"template"},{"name":"template"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"template"},{"name":"template"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"template"}}],[11,"compile","","",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"compile_with_name","","",0,{"inputs":[{"name":"s"},{"name":"string"}],"output":{"name":"result"}}],[11,"to_string","","",0,{"inputs":[{"name":"template"}],"output":{"name":"string"}}],[11,"clone","","",3,{"inputs":[{"name":"templateerror"}],"output":{"name":"templateerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"templateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"templateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"templateerror"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"templateerror"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"templatefileerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"templatefileerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"templatefileerror"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"templatefileerror"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"templateerror"}],"output":{"name":"templatefileerror"}}],[11,"from","","",4,{"inputs":[{"name":"ioerror"}],"output":{"name":"templatefileerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"templaterendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"templaterendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"templaterendererror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"templaterendererror"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"templateerror"}],"output":{"name":"templaterendererror"}}],[11,"from","","",5,{"inputs":[{"name":"rendererror"}],"output":{"name":"templaterendererror"}}],[11,"from","","",5,{"inputs":[{"name":"ioerror"}],"output":{"name":"templaterendererror"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"registry"}}],[11,"register_template","","Register a template",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"template"}],"output":null}],[11,"register_template_string","","Register a template string",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"string"}],"output":{"name":"result"}}],[11,"register_template_file","","Register a template from a path",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"path"}],"output":{"name":"result"}}],[11,"register_template_source","","Register a template from `std::io::Read` source",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"read"}],"output":{"name":"result"}}],[11,"unregister_template","","remove a template from the registry",6,{"inputs":[{"name":"registry"},{"name":"str"}],"output":null}],[11,"register_helper","","register a helper",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"box"}],"output":{"name":"option"}}],[11,"register_escape_fn","","Register a new *escape fn* to be used from now on by this registry.",6,{"inputs":[{"name":"registry"},{"name":"f"}],"output":null}],[11,"unregister_escape_fn","","Restore the default *escape fn*.",6,{"inputs":[{"name":"registry"}],"output":null}],[11,"get_escape_fn","","Get a reference to the current *escape fn*.",6,{"inputs":[{"name":"registry"}],"output":{"name":"fn"}}],[11,"get_template","","Return a registered template,",6,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_helper","","Return a registered helper",6,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_templates","","Return all templates registered",6,{"inputs":[{"name":"registry"}],"output":{"name":"hashmap"}}],[11,"clear_templates","","Unregister all templates",6,{"inputs":[{"name":"registry"}],"output":null}],[11,"render","","Render a registered template with some data into a string",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"renderw","","Render a registered template with some data to the `std::io::Write`",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"context"},{"name":"write"}],"output":{"name":"result"}}],[11,"template_render","","render a template string using current registry without register it",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"template_renderw","","render a template string using current registry without register it",6,{"inputs":[{"name":"registry"},{"name":"str"},{"name":"context"},{"name":"write"}],"output":{"name":"result"}}],[11,"template_renderw2","","render a template source using current registry without register it",6,{"inputs":[{"name":"registry"},{"name":"read"},{"name":"context"},{"name":"write"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"rendererror"}],"output":{"name":"rendererror"}}],[11,"fmt","","",1,{"inputs":[{"name":"rendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"rendererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"rendererror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"ioerror"}],"output":{"name":"rendererror"}}],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"rendererror"}}],[11,"new","","Create a render context from a `Write`",2,{"inputs":[{"name":"write"}],"output":{"name":"rendercontext"}}],[11,"with_writer","","Create a new `RenderContext` with a different `Write`",2,{"inputs":[{"name":"rendercontext"},{"name":"write"}],"output":{"name":"rendercontext"}}],[11,"get_partial","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"}],"output":{"name":"option"}}],[11,"set_partial","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"},{"name":"template"}],"output":null}],[11,"get_path","","",2,{"inputs":[{"name":"rendercontext"}],"output":{"name":"string"}}],[11,"set_path","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"}],"output":null}],[11,"set_local_var","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"},{"name":"json"}],"output":null}],[11,"clear_local_vars","","",2,{"inputs":[{"name":"rendercontext"}],"output":null}],[11,"promote_local_vars","","",2,{"inputs":[{"name":"rendercontext"}],"output":null}],[11,"demote_local_vars","","",2,{"inputs":[{"name":"rendercontext"}],"output":null}],[11,"get_local_var","","",2,{"inputs":[{"name":"rendercontext"},{"name":"string"}],"output":{"name":"json"}}],[11,"writer","","",2,{"inputs":[{"name":"rendercontext"}],"output":{"name":"write"}}],[11,"fmt","","",2,{"inputs":[{"name":"rendercontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"string"}}],[11,"params","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"vec"}}],[11,"param","","",7,{"inputs":[{"name":"helper"},{"name":"usize"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"btreemap"}}],[11,"hash_get","","",7,{"inputs":[{"name":"helper"},{"name":"str"}],"output":{"name":"option"}}],[11,"template","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"option"}}],[11,"inverse","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"option"}}],[11,"is_block","","",7,{"inputs":[{"name":"helper"}],"output":{"name":"bool"}}],[11,"render","","",0,{"inputs":[{"name":"template"},{"name":"context"},{"name":"registry"},{"name":"rendercontext"}],"output":{"name":"result"}}],[11,"new","regex::re_unicode","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",8,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",8,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",8,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",8,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",8,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",8,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"fmt","regex::error","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::re_builder::bytes","Create a new regular expression builder with the given pattern.",10,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",10,{"inputs":[{"name":"regexbuilder"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",10,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",10,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",10,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",10,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",10,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",10,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",10,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",10,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::re_builder::unicode","Create a new regular expression builder with the given pattern.",11,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",11,{"inputs":[{"name":"regexbuilder"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",11,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",11,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",11,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",11,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",11,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",11,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",11,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",11,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"clone","regex::re_bytes","",12,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",12,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",12,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",12,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",12,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",12,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",12,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",12,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",12,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",12,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",12,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",12,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",12,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",12,null],[11,"shortest_match","","Returns the end location of a match in the text given.",12,null],[11,"as_str","","Returns the original string of this regex.",12,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",12,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",12,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"splits"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"splitsn"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",18,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",18,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",18,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",18,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",18,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",18,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",18,null],[11,"len","","Returns the number of captured groups.",18,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",18,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",18,null],[11,"index","","",18,null],[11,"next","","",19,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"replace_append","","",22,null],[11,"no_expansion","","",22,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"clone","regex::re_set::unicode","",23,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",23,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",23,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",23,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",24,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",24,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",24,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",24,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",24,null],[11,"next","","",25,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",26,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",26,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::re_set::bytes","",27,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",27,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",27,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",27,null],[11,"len","","Returns the total number of regular expressions in this set.",27,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",28,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",28,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",28,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",28,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",28,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",28,null],[11,"next","","",29,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",30,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::re_unicode","",8,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",8,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",8,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"next","","",31,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"reg_replace","","",32,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",32,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",35,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",35,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",35,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",35,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",35,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",35,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",35,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",35,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",35,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",35,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",35,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",36,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"from_reader","rustc_serialize::json","Decodes a json value from an `&amp;mut io::Read`",41,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",41,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",41,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",41,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",41,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",41,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",41,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"encode","collections::string","",42,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",43,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",44,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",46,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",47,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",48,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",49,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",51,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",53,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",54,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",55,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",56,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",57,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",58,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",59,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::base64","",60,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",61,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",62,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",63,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",63,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",63,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",63,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","rustc_serialize::hex","",64,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",64,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",64,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::json","",41,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",65,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",66,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"encodererror"}],"output":{"name":"encodererror"}}],[11,"fmt","","",65,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",67,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",67,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",67,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",66,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",66,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",66,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",68,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",68,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",68,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",69,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",69,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",69,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",69,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",69,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",69,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",69,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",69,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",69,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",69,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",69,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",69,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",69,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",69,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",69,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",69,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",69,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",69,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",69,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",69,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",69,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",69,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",69,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",69,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",69,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",69,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",69,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",69,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",69,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"index","","",41,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",41,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",70,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",71,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",72,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",72,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",72,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",72,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",72,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",72,null],[11,"top","","Returns the top-most element (if any).",72,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",73,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",73,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",74,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",74,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",75,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",75,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",75,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",75,null],[11,"read_enum_variant_arg","","",75,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",75,null],[11,"read_enum_struct_variant_field","","",75,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",75,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",75,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",75,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",75,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",75,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",75,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",75,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",75,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",75,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",75,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",75,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",75,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",75,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",41,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",42,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",46,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",58,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",47,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",41,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",76,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",77,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",78,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",78,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",41,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","handlebars","",79,{"inputs":[{"name":"context"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Create a context with null data",79,{"inputs":[],"output":{"name":"context"}}],[11,"wraps","","Create a context with given data",79,{"inputs":[{"name":"t"}],"output":{"name":"context"}}],[11,"extend","","Extend current context with another JSON object\nIf current context is a JSON object, it&#39;s identical to a normal merge\nOtherwise, the current value will be stored in new JSON object with key `this`, and merged\nkeys are also available.",79,{"inputs":[{"name":"context"},{"name":"object"}],"output":{"name":"context"}}],[11,"navigate","","Navigate the context with base path and relative path\nTypically you will set base path to `RenderContext.get_path()`\nand set relative path to helper argument or so.",79,{"inputs":[{"name":"context"},{"name":"str"},{"name":"str"}],"output":{"name":"json"}}],[11,"render","rustc_serialize::json","",41,{"inputs":[{"name":"json"}],"output":{"name":"string"}}],[11,"is_truthy","","",41,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[6,"EscapeFn","handlebars","This type represents an *escape fn*, that is a function who&#39;s purpose it is\nto escape potentially problematic characters in a string.",null,null],[8,"Renderable","","",null,null],[10,"render","","",80,{"inputs":[{"name":"renderable"},{"name":"context"},{"name":"registry"},{"name":"rendercontext"}],"output":{"name":"result"}}],[8,"HelperDef","","Helper Definition",null,null],[10,"call","","",81,{"inputs":[{"name":"helperdef"},{"name":"context"},{"name":"helper"},{"name":"registry"},{"name":"rendercontext"}],"output":{"name":"result"}}],[8,"JsonRender","","",null,null],[10,"render","","",82,{"inputs":[{"name":"jsonrender"}],"output":{"name":"string"}}],[8,"JsonTruthy","","",null,null],[10,"is_truthy","","",83,{"inputs":[{"name":"jsontruthy"}],"output":{"name":"bool"}}]],"paths":[[3,"Template"],[3,"RenderError"],[3,"RenderContext"],[4,"TemplateError"],[4,"TemplateFileError"],[4,"TemplateRenderError"],[3,"Registry"],[3,"Helper"],[3,"Regex"],[4,"Error"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"NoExpand"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"CaptureNames"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[4,"Json"],[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[4,"CharacterSet"],[4,"Newline"],[3,"Config"],[4,"FromBase64Error"],[4,"FromHexError"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[3,"Encoder"],[4,"JsonEvent"],[4,"StackElement"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Context"],[8,"Renderable"],[8,"HelperDef"],[8,"JsonRender"],[8,"JsonTruthy"]]};
initSearch(searchIndex);
